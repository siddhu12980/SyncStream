
services:
  db:
    container_name: syncstream_db
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: syncstream
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - app-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    container_name: syncstream_redis
    image: redis:latest
    networks:
      - app-network
    ports:
      - "6379:6379"

  server:
    container_name: syncstream_server
    build:
      context: .
      dockerfile: Dockerfile.server
    networks:
      - app-network
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/syncstream
      REDIS_HOST: syncstream_redis
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ap-south-1
      AWS_REGION: ap-south-1
      S3_BUCKET: ${S3_BUCKET}
      JWT_SECRET: ${JWT_SECRET}
      JWT_ALGORITHM: ${JWT_ALGORITHM}
      REGION: ap-south-1
      region: ap-south-1

      CELERY_BROKER_URL: redis://syncstream_redis:6379/0
      CELERY_RESULT_BACKEND: redis://syncstream_redis:6379/1
    depends_on:
      - db
      - redis
    ports:
      - "8000:8000"

  worker:
    container_name: syncstream_worker
    build:
      context: .
      dockerfile: Dockerfile.worker
    networks:
      - app-network
    environment:
      DATABASE_URL: postgresql://postgres:postgres@db:5432/syncstream
      REDIS_HOST: syncstream_redis
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_DEFAULT_REGION: ap-south-1
      AWS_REGION: ap-south-1
      S3_BUCKET: ${S3_BUCKET}
      REGION: ap-south-1
      region: ap-south-1
      
    depends_on:
      - db
      - redis

networks:
  app-network:
    name: app-network

volumes:
  postgres_data:
    name: syncstream_db_data